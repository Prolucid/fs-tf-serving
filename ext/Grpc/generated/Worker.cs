// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tensorflow {

  /// <summary>Holder for reflection information generated from worker.proto</summary>
  public static partial class WorkerReflection {

    #region Descriptor
    /// <summary>File descriptor for worker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WorkerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgx3b3JrZXIucHJvdG8SCnRlbnNvcmZsb3caGWdvb2dsZS9wcm90b2J1Zi9h",
            "bnkucHJvdG8aKnRlbnNvcmZsb3cvY29yZS9mcmFtZXdvcmsvY29zdF9ncmFw",
            "aC5wcm90bxoqdGVuc29yZmxvdy9jb3JlL2ZyYW1ld29yay9zdGVwX3N0YXRz",
            "LnByb3RvGjF0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL2RldmljZV9hdHRy",
            "aWJ1dGVzLnByb3RvGiV0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL2dyYXBo",
            "LnByb3RvGiZ0ZW5zb3JmbG93L2NvcmUvZnJhbWV3b3JrL3RlbnNvci5wcm90",
            "bxoldGVuc29yZmxvdy9jb3JlL3Byb3RvYnVmL2NvbmZpZy5wcm90bxokdGVu",
            "c29yZmxvdy9jb3JlL3Byb3RvYnVmL2RlYnVnLnByb3RvGit0ZW5zb3JmbG93",
            "L2NvcmUvcHJvdG9idWYvbmFtZWRfdGVuc29yLnByb3RvGjB0ZW5zb3JmbG93",
            "L2NvcmUvcHJvdG9idWYvdGVuc29yZmxvd19zZXJ2ZXIucHJvdG8iEgoQR2V0",
            "U3RhdHVzUmVxdWVzdCJMChFHZXRTdGF0dXNSZXNwb25zZRI3ChFkZXZpY2Vf",
            "YXR0cmlidXRlcxgBIAMoCzIcLnRlbnNvcmZsb3cuRGV2aWNlQXR0cmlidXRl",
            "cyJfChpDcmVhdGVXb3JrZXJTZXNzaW9uUmVxdWVzdBIWCg5zZXNzaW9uX2hh",
            "bmRsZRgBIAEoCRIpCgpzZXJ2ZXJfZGVmGAIgASgLMhUudGVuc29yZmxvdy5T",
            "ZXJ2ZXJEZWYiHQobQ3JlYXRlV29ya2VyU2Vzc2lvblJlc3BvbnNlItcBChRS",
            "ZWdpc3RlckdyYXBoUmVxdWVzdBIWCg5zZXNzaW9uX2hhbmRsZRgBIAEoCRIn",
            "CglncmFwaF9kZWYYAiABKAsyFC50ZW5zb3JmbG93LkdyYXBoRGVmEhwKEGhh",
            "c19jb250cm9sX2Zsb3cYAyABKAhCAhgBEi8KDWdyYXBoX29wdGlvbnMYBCAB",
            "KAsyGC50ZW5zb3JmbG93LkdyYXBoT3B0aW9ucxIvCg1kZWJ1Z19vcHRpb25z",
            "GAUgASgLMhgudGVuc29yZmxvdy5EZWJ1Z09wdGlvbnMiLQoVUmVnaXN0ZXJH",
            "cmFwaFJlc3BvbnNlEhQKDGdyYXBoX2hhbmRsZRgBIAEoCSJGChZEZXJlZ2lz",
            "dGVyR3JhcGhSZXF1ZXN0EhYKDnNlc3Npb25faGFuZGxlGAIgASgJEhQKDGdy",
            "YXBoX2hhbmRsZRgBIAEoCSIZChdEZXJlZ2lzdGVyR3JhcGhSZXNwb25zZSIm",
            "ChFDbGVhbnVwQWxsUmVxdWVzdBIRCgljb250YWluZXIYASADKAkiFAoSQ2xl",
            "YW51cEFsbFJlc3BvbnNlIl4KDEV4ZWN1dG9yT3B0cxIUCgxyZWNvcmRfY29z",
            "dHMYASABKAgSFwoPcmVjb3JkX3RpbWVsaW5lGAMgASgIEh8KF3JlY29yZF9w",
            "YXJ0aXRpb25fZ3JhcGhzGAQgASgIIuwBCg9SdW5HcmFwaFJlcXVlc3QSFgoO",
            "c2Vzc2lvbl9oYW5kbGUYCCABKAkSFAoMZ3JhcGhfaGFuZGxlGAEgASgJEg8K",
            "B3N0ZXBfaWQYAiABKAMSKwoJZXhlY19vcHRzGAUgASgLMhgudGVuc29yZmxv",
            "dy5FeGVjdXRvck9wdHMSKgoEc2VuZBgDIAMoCzIcLnRlbnNvcmZsb3cuTmFt",
            "ZWRUZW5zb3JQcm90bxIQCghyZWN2X2tleRgEIAMoCRISCgppc19wYXJ0aWFs",
            "GAYgASgIEhsKE2lzX2xhc3RfcGFydGlhbF9ydW4YByABKAgixgEKEFJ1bkdy",
            "YXBoUmVzcG9uc2USKgoEcmVjdhgBIAMoCzIcLnRlbnNvcmZsb3cuTmFtZWRU",
            "ZW5zb3JQcm90bxIpCgpzdGVwX3N0YXRzGAIgASgLMhUudGVuc29yZmxvdy5T",
            "dGVwU3RhdHMSLAoKY29zdF9ncmFwaBgDIAEoCzIYLnRlbnNvcmZsb3cuQ29z",
            "dEdyYXBoRGVmEi0KD3BhcnRpdGlvbl9ncmFwaBgEIAMoCzIULnRlbnNvcmZs",
            "b3cuR3JhcGhEZWYiJgoTQ2xlYW51cEdyYXBoUmVxdWVzdBIPCgdzdGVwX2lk",
            "GAEgASgDIhYKFENsZWFudXBHcmFwaFJlc3BvbnNlIucBChFSZWN2VGVuc29y",
            "UmVxdWVzdBIPCgdzdGVwX2lkGAEgASgDEhYKDnJlbmRlenZvdXNfa2V5GAIg",
            "ASgJEg4KBmRtYV9vaxgDIAEoCBIzCg9jbGllbnRfbG9jYWxpdHkYBCABKAsy",
            "Gi50ZW5zb3JmbG93LkRldmljZUxvY2FsaXR5EjMKD3NlcnZlcl9sb2NhbGl0",
            "eRgFIAEoCzIaLnRlbnNvcmZsb3cuRGV2aWNlTG9jYWxpdHkSLwoRdHJhbnNw",
            "b3J0X29wdGlvbnMYBiABKAsyFC5nb29nbGUucHJvdG9idWYuQW55IpoBChJS",
            "ZWN2VGVuc29yUmVzcG9uc2USJwoGdGVuc29yGAEgASgLMhcudGVuc29yZmxv",
            "dy5UZW5zb3JQcm90bxIPCgdpc19kZWFkGAIgASgIEhkKEXNlbmRfc3RhcnRf",
            "bWljcm9zGAMgASgDEi8KEXRyYW5zcG9ydF9vcHRpb25zGAQgASgLMhQuZ29v",
            "Z2xlLnByb3RvYnVmLkFueSJLCg5Mb2dnaW5nUmVxdWVzdBITCgtycGNfbG9n",
            "Z2luZxgBIAEoCBINCgVjbGVhchgCIAEoCBIVCg1mZXRjaF9zdGVwX2lkGAMg",
            "AygDIk4KEExhYmVsZWRTdGVwU3RhdHMSDwoHc3RlcF9pZBgBIAEoAxIpCgpz",
            "dGVwX3N0YXRzGAIgASgLMhUudGVuc29yZmxvdy5TdGVwU3RhdHMiPQoPTG9n",
            "Z2luZ1Jlc3BvbnNlEioKBHN0ZXAYASADKAsyHC50ZW5zb3JmbG93LkxhYmVs",
            "ZWRTdGVwU3RhdHMiqwEKCVRyYWNlT3B0cxIQCghkdXJhdGlvbhgBIAEoARIZ",
            "ChF1c2Vfc3RlcF9wcm9maWxlchgCIAEoCBIbChN1c2Vfa2VybmVsX3Byb2Zp",
            "bGVyGAMgASgIEh0KFXVzZV9leHRlbmRlZF9wcm9maWxlchgEIAEoCBIYChB1",
            "c2VfZ3B1X3Byb2ZpbGVyGAUgASgIEhsKE3VzZV9zYW1wbGVfcHJvZmlsZXIY",
            "BiABKAgiOAoOVHJhY2luZ1JlcXVlc3QSJgoHb3B0aW9ucxgBIAEoCzIVLnRl",
            "bnNvcmZsb3cuVHJhY2VPcHRzIhEKD1RyYWNpbmdSZXNwb25zZUIvChpvcmcu",
            "dGVuc29yZmxvdy5kaXN0cnVudGltZUIMV29ya2VyUHJvdG9zUAH4AQFiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::Tensorflow.CostGraphReflection.Descriptor, global::Tensorflow.StepStatsReflection.Descriptor, global::Tensorflow.DeviceAttributesReflection.Descriptor, global::Tensorflow.GraphReflection.Descriptor, global::Tensorflow.TensorReflection.Descriptor, global::Tensorflow.ConfigReflection.Descriptor, global::Tensorflow.DebugReflection.Descriptor, global::Tensorflow.NamedTensorReflection.Descriptor, global::Tensorflow.TensorflowServerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStatusRequest), global::Tensorflow.GetStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.GetStatusResponse), global::Tensorflow.GetStatusResponse.Parser, new[]{ "DeviceAttributes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateWorkerSessionRequest), global::Tensorflow.CreateWorkerSessionRequest.Parser, new[]{ "SessionHandle", "ServerDef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CreateWorkerSessionResponse), global::Tensorflow.CreateWorkerSessionResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RegisterGraphRequest), global::Tensorflow.RegisterGraphRequest.Parser, new[]{ "SessionHandle", "GraphDef", "HasControlFlow", "GraphOptions", "DebugOptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RegisterGraphResponse), global::Tensorflow.RegisterGraphResponse.Parser, new[]{ "GraphHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeregisterGraphRequest), global::Tensorflow.DeregisterGraphRequest.Parser, new[]{ "SessionHandle", "GraphHandle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.DeregisterGraphResponse), global::Tensorflow.DeregisterGraphResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupAllRequest), global::Tensorflow.CleanupAllRequest.Parser, new[]{ "Container" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupAllResponse), global::Tensorflow.CleanupAllResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.ExecutorOpts), global::Tensorflow.ExecutorOpts.Parser, new[]{ "RecordCosts", "RecordTimeline", "RecordPartitionGraphs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunGraphRequest), global::Tensorflow.RunGraphRequest.Parser, new[]{ "SessionHandle", "GraphHandle", "StepId", "ExecOpts", "Send", "RecvKey", "IsPartial", "IsLastPartialRun" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RunGraphResponse), global::Tensorflow.RunGraphResponse.Parser, new[]{ "Recv", "StepStats", "CostGraph", "PartitionGraph" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupGraphRequest), global::Tensorflow.CleanupGraphRequest.Parser, new[]{ "StepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.CleanupGraphResponse), global::Tensorflow.CleanupGraphResponse.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvTensorRequest), global::Tensorflow.RecvTensorRequest.Parser, new[]{ "StepId", "RendezvousKey", "DmaOk", "ClientLocality", "ServerLocality", "TransportOptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.RecvTensorResponse), global::Tensorflow.RecvTensorResponse.Parser, new[]{ "Tensor", "IsDead", "SendStartMicros", "TransportOptions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LoggingRequest), global::Tensorflow.LoggingRequest.Parser, new[]{ "RpcLogging", "Clear", "FetchStepId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LabeledStepStats), global::Tensorflow.LabeledStepStats.Parser, new[]{ "StepId", "StepStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.LoggingResponse), global::Tensorflow.LoggingResponse.Parser, new[]{ "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TraceOpts), global::Tensorflow.TraceOpts.Parser, new[]{ "Duration", "UseStepProfiler", "UseKernelProfiler", "UseExtendedProfiler", "UseGpuProfiler", "UseSampleProfiler" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TracingRequest), global::Tensorflow.TracingRequest.Parser, new[]{ "Options" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tensorflow.TracingResponse), global::Tensorflow.TracingResponse.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetStatusRequest : pb::IMessage<GetStatusRequest> {
    private static readonly pb::MessageParser<GetStatusRequest> _parser = new pb::MessageParser<GetStatusRequest>(() => new GetStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest(GetStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusRequest Clone() {
      return new GetStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetStatusResponse : pb::IMessage<GetStatusResponse> {
    private static readonly pb::MessageParser<GetStatusResponse> _parser = new pb::MessageParser<GetStatusResponse>(() => new GetStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse(GetStatusResponse other) : this() {
      deviceAttributes_ = other.deviceAttributes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStatusResponse Clone() {
      return new GetStatusResponse(this);
    }

    /// <summary>Field number for the "device_attributes" field.</summary>
    public const int DeviceAttributesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.DeviceAttributes> _repeated_deviceAttributes_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.DeviceAttributes.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.DeviceAttributes> deviceAttributes_ = new pbc::RepeatedField<global::Tensorflow.DeviceAttributes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.DeviceAttributes> DeviceAttributes {
      get { return deviceAttributes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!deviceAttributes_.Equals(other.deviceAttributes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= deviceAttributes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      deviceAttributes_.WriteTo(output, _repeated_deviceAttributes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += deviceAttributes_.CalculateSize(_repeated_deviceAttributes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStatusResponse other) {
      if (other == null) {
        return;
      }
      deviceAttributes_.Add(other.deviceAttributes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            deviceAttributes_.AddEntriesFrom(input, _repeated_deviceAttributes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkerSessionRequest : pb::IMessage<CreateWorkerSessionRequest> {
    private static readonly pb::MessageParser<CreateWorkerSessionRequest> _parser = new pb::MessageParser<CreateWorkerSessionRequest>(() => new CreateWorkerSessionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkerSessionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest(CreateWorkerSessionRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      ServerDef = other.serverDef_ != null ? other.ServerDef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionRequest Clone() {
      return new CreateWorkerSessionRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Sessions are identified by a given handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_def" field.</summary>
    public const int ServerDefFieldNumber = 2;
    private global::Tensorflow.ServerDef serverDef_;
    /// <summary>
    /// Defines the configuration of a TensorFlow worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ServerDef ServerDef {
      get { return serverDef_; }
      set {
        serverDef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkerSessionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkerSessionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (!object.Equals(ServerDef, other.ServerDef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (serverDef_ != null) hash ^= ServerDef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (serverDef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ServerDef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (serverDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerDef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkerSessionRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.serverDef_ != null) {
        if (serverDef_ == null) {
          serverDef_ = new global::Tensorflow.ServerDef();
        }
        ServerDef.MergeFrom(other.ServerDef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            if (serverDef_ == null) {
              serverDef_ = new global::Tensorflow.ServerDef();
            }
            input.ReadMessage(serverDef_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateWorkerSessionResponse : pb::IMessage<CreateWorkerSessionResponse> {
    private static readonly pb::MessageParser<CreateWorkerSessionResponse> _parser = new pb::MessageParser<CreateWorkerSessionResponse>(() => new CreateWorkerSessionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateWorkerSessionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse(CreateWorkerSessionResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateWorkerSessionResponse Clone() {
      return new CreateWorkerSessionResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateWorkerSessionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateWorkerSessionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateWorkerSessionResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RegisterGraphRequest : pb::IMessage<RegisterGraphRequest> {
    private static readonly pb::MessageParser<RegisterGraphRequest> _parser = new pb::MessageParser<RegisterGraphRequest>(() => new RegisterGraphRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest(RegisterGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      GraphDef = other.graphDef_ != null ? other.GraphDef.Clone() : null;
      hasControlFlow_ = other.hasControlFlow_;
      GraphOptions = other.graphOptions_ != null ? other.GraphOptions.Clone() : null;
      DebugOptions = other.debugOptions_ != null ? other.DebugOptions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphRequest Clone() {
      return new RegisterGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 1;
    private string sessionHandle_ = "";
    /// <summary>
    /// Subgraphs are scoped within one session.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_def" field.</summary>
    public const int GraphDefFieldNumber = 2;
    private global::Tensorflow.GraphDef graphDef_;
    /// <summary>
    /// "graph_def" has the subgraph of nodes for this worker, with each node
    /// having its device_name filled in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphDef GraphDef {
      get { return graphDef_; }
      set {
        graphDef_ = value;
      }
    }

    /// <summary>Field number for the "has_control_flow" field.</summary>
    public const int HasControlFlowFieldNumber = 3;
    private bool hasControlFlow_;
    /// <summary>
    /// True iff the graph (before partitioning) contains control flow nodes.
    ///
    /// As of 01/11/2015, this is no longer set by clients.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasControlFlow {
      get { return hasControlFlow_; }
      set {
        hasControlFlow_ = value;
      }
    }

    /// <summary>Field number for the "graph_options" field.</summary>
    public const int GraphOptionsFieldNumber = 4;
    private global::Tensorflow.GraphOptions graphOptions_;
    /// <summary>
    /// Configuration options for the session in which this graph was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.GraphOptions GraphOptions {
      get { return graphOptions_; }
      set {
        graphOptions_ = value;
      }
    }

    /// <summary>Field number for the "debug_options" field.</summary>
    public const int DebugOptionsFieldNumber = 5;
    private global::Tensorflow.DebugOptions debugOptions_;
    /// <summary>
    /// Field(s) used by TensorFlow Debugger (tfdbg).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DebugOptions DebugOptions {
      get { return debugOptions_; }
      set {
        debugOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (!object.Equals(GraphDef, other.GraphDef)) return false;
      if (HasControlFlow != other.HasControlFlow) return false;
      if (!object.Equals(GraphOptions, other.GraphOptions)) return false;
      if (!object.Equals(DebugOptions, other.DebugOptions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (graphDef_ != null) hash ^= GraphDef.GetHashCode();
      if (HasControlFlow != false) hash ^= HasControlFlow.GetHashCode();
      if (graphOptions_ != null) hash ^= GraphOptions.GetHashCode();
      if (debugOptions_ != null) hash ^= DebugOptions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionHandle);
      }
      if (graphDef_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GraphDef);
      }
      if (HasControlFlow != false) {
        output.WriteRawTag(24);
        output.WriteBool(HasControlFlow);
      }
      if (graphOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GraphOptions);
      }
      if (debugOptions_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DebugOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (graphDef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphDef);
      }
      if (HasControlFlow != false) {
        size += 1 + 1;
      }
      if (graphOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GraphOptions);
      }
      if (debugOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugOptions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.graphDef_ != null) {
        if (graphDef_ == null) {
          graphDef_ = new global::Tensorflow.GraphDef();
        }
        GraphDef.MergeFrom(other.GraphDef);
      }
      if (other.HasControlFlow != false) {
        HasControlFlow = other.HasControlFlow;
      }
      if (other.graphOptions_ != null) {
        if (graphOptions_ == null) {
          graphOptions_ = new global::Tensorflow.GraphOptions();
        }
        GraphOptions.MergeFrom(other.GraphOptions);
      }
      if (other.debugOptions_ != null) {
        if (debugOptions_ == null) {
          debugOptions_ = new global::Tensorflow.DebugOptions();
        }
        DebugOptions.MergeFrom(other.DebugOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionHandle = input.ReadString();
            break;
          }
          case 18: {
            if (graphDef_ == null) {
              graphDef_ = new global::Tensorflow.GraphDef();
            }
            input.ReadMessage(graphDef_);
            break;
          }
          case 24: {
            HasControlFlow = input.ReadBool();
            break;
          }
          case 34: {
            if (graphOptions_ == null) {
              graphOptions_ = new global::Tensorflow.GraphOptions();
            }
            input.ReadMessage(graphOptions_);
            break;
          }
          case 42: {
            if (debugOptions_ == null) {
              debugOptions_ = new global::Tensorflow.DebugOptions();
            }
            input.ReadMessage(debugOptions_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterGraphResponse : pb::IMessage<RegisterGraphResponse> {
    private static readonly pb::MessageParser<RegisterGraphResponse> _parser = new pb::MessageParser<RegisterGraphResponse>(() => new RegisterGraphResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse(RegisterGraphResponse other) : this() {
      graphHandle_ = other.graphHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterGraphResponse Clone() {
      return new RegisterGraphResponse(this);
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// If the registration succeeds, returns an opaque graph_handle to
    /// the master. The master calls RunGraph with graph_handle to
    /// compute different steps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphHandle != other.GraphHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterGraphResponse other) {
      if (other == null) {
        return;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeregisterGraphRequest : pb::IMessage<DeregisterGraphRequest> {
    private static readonly pb::MessageParser<DeregisterGraphRequest> _parser = new pb::MessageParser<DeregisterGraphRequest>(() => new DeregisterGraphRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest(DeregisterGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      graphHandle_ = other.graphHandle_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphRequest Clone() {
      return new DeregisterGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 2;
    private string sessionHandle_ = "";
    /// <summary>
    /// The session_handle used when registering the graph. If session_handle is
    /// empty, a single global namespace is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// REQUIRED: graph_handle must be returned by a RegisterGraph call
    /// to the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (GraphHandle != other.GraphHandle) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
          case 18: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO(mrry): Optionally add summary stats for the graph.
  /// </summary>
  public sealed partial class DeregisterGraphResponse : pb::IMessage<DeregisterGraphResponse> {
    private static readonly pb::MessageParser<DeregisterGraphResponse> _parser = new pb::MessageParser<DeregisterGraphResponse>(() => new DeregisterGraphResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeregisterGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse(DeregisterGraphResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeregisterGraphResponse Clone() {
      return new DeregisterGraphResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeregisterGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeregisterGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeregisterGraphResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CleanupAllRequest : pb::IMessage<CleanupAllRequest> {
    private static readonly pb::MessageParser<CleanupAllRequest> _parser = new pb::MessageParser<CleanupAllRequest>(() => new CleanupAllRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupAllRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest(CleanupAllRequest other) : this() {
      container_ = other.container_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllRequest Clone() {
      return new CleanupAllRequest(this);
    }

    /// <summary>Field number for the "container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_container_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> container_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of container names.
    ///
    /// If 'container' is not empty, releases resources in the given
    /// containers in all devices.
    ///
    /// If 'container' is empty, releases resources in the default
    /// container in all devices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Container {
      get { return container_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupAllRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupAllRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!container_.Equals(other.container_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= container_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      container_.WriteTo(output, _repeated_container_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += container_.CalculateSize(_repeated_container_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupAllRequest other) {
      if (other == null) {
        return;
      }
      container_.Add(other.container_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            container_.AddEntriesFrom(input, _repeated_container_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupAllResponse : pb::IMessage<CleanupAllResponse> {
    private static readonly pb::MessageParser<CleanupAllResponse> _parser = new pb::MessageParser<CleanupAllResponse>(() => new CleanupAllResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupAllResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse(CleanupAllResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupAllResponse Clone() {
      return new CleanupAllResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupAllResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupAllResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupAllResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  /// Options specific to the execution of a single step.
  /// </summary>
  public sealed partial class ExecutorOpts : pb::IMessage<ExecutorOpts> {
    private static readonly pb::MessageParser<ExecutorOpts> _parser = new pb::MessageParser<ExecutorOpts>(() => new ExecutorOpts());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExecutorOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts(ExecutorOpts other) : this() {
      recordCosts_ = other.recordCosts_;
      recordTimeline_ = other.recordTimeline_;
      recordPartitionGraphs_ = other.recordPartitionGraphs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExecutorOpts Clone() {
      return new ExecutorOpts(this);
    }

    /// <summary>Field number for the "record_costs" field.</summary>
    public const int RecordCostsFieldNumber = 1;
    private bool recordCosts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordCosts {
      get { return recordCosts_; }
      set {
        recordCosts_ = value;
      }
    }

    /// <summary>Field number for the "record_timeline" field.</summary>
    public const int RecordTimelineFieldNumber = 3;
    private bool recordTimeline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordTimeline {
      get { return recordTimeline_; }
      set {
        recordTimeline_ = value;
      }
    }

    /// <summary>Field number for the "record_partition_graphs" field.</summary>
    public const int RecordPartitionGraphsFieldNumber = 4;
    private bool recordPartitionGraphs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RecordPartitionGraphs {
      get { return recordPartitionGraphs_; }
      set {
        recordPartitionGraphs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExecutorOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExecutorOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RecordCosts != other.RecordCosts) return false;
      if (RecordTimeline != other.RecordTimeline) return false;
      if (RecordPartitionGraphs != other.RecordPartitionGraphs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RecordCosts != false) hash ^= RecordCosts.GetHashCode();
      if (RecordTimeline != false) hash ^= RecordTimeline.GetHashCode();
      if (RecordPartitionGraphs != false) hash ^= RecordPartitionGraphs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RecordCosts != false) {
        output.WriteRawTag(8);
        output.WriteBool(RecordCosts);
      }
      if (RecordTimeline != false) {
        output.WriteRawTag(24);
        output.WriteBool(RecordTimeline);
      }
      if (RecordPartitionGraphs != false) {
        output.WriteRawTag(32);
        output.WriteBool(RecordPartitionGraphs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RecordCosts != false) {
        size += 1 + 1;
      }
      if (RecordTimeline != false) {
        size += 1 + 1;
      }
      if (RecordPartitionGraphs != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExecutorOpts other) {
      if (other == null) {
        return;
      }
      if (other.RecordCosts != false) {
        RecordCosts = other.RecordCosts;
      }
      if (other.RecordTimeline != false) {
        RecordTimeline = other.RecordTimeline;
      }
      if (other.RecordPartitionGraphs != false) {
        RecordPartitionGraphs = other.RecordPartitionGraphs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RecordCosts = input.ReadBool();
            break;
          }
          case 24: {
            RecordTimeline = input.ReadBool();
            break;
          }
          case 32: {
            RecordPartitionGraphs = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunGraphRequest : pb::IMessage<RunGraphRequest> {
    private static readonly pb::MessageParser<RunGraphRequest> _parser = new pb::MessageParser<RunGraphRequest>(() => new RunGraphRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest(RunGraphRequest other) : this() {
      sessionHandle_ = other.sessionHandle_;
      graphHandle_ = other.graphHandle_;
      stepId_ = other.stepId_;
      ExecOpts = other.execOpts_ != null ? other.ExecOpts.Clone() : null;
      send_ = other.send_.Clone();
      recvKey_ = other.recvKey_.Clone();
      isPartial_ = other.isPartial_;
      isLastPartialRun_ = other.isLastPartialRun_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphRequest Clone() {
      return new RunGraphRequest(this);
    }

    /// <summary>Field number for the "session_handle" field.</summary>
    public const int SessionHandleFieldNumber = 8;
    private string sessionHandle_ = "";
    /// <summary>
    /// session_handle is the master-generated unique id for this session.
    /// If session_handle is non-empty, it must be the same as used when
    /// registering the graph. If it is empty, a single global namespace is used to
    /// search for the graph_handle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionHandle {
      get { return sessionHandle_; }
      set {
        sessionHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "graph_handle" field.</summary>
    public const int GraphHandleFieldNumber = 1;
    private string graphHandle_ = "";
    /// <summary>
    /// REQUIRED: graph_handle must be returned by a RegisterGraph call
    /// to the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GraphHandle {
      get { return graphHandle_; }
      set {
        graphHandle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 2;
    private long stepId_;
    /// <summary>
    /// A unique ID to distinguish different runs of the same graph.
    ///
    /// The master generates a global unique `step_id` to distinguish
    /// different runs of the graph computation. Subgraphs communicate
    /// (e.g., send/recv ops) with each other using `step_id` to
    /// distinguish tensors generated by different runs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "exec_opts" field.</summary>
    public const int ExecOptsFieldNumber = 5;
    private global::Tensorflow.ExecutorOpts execOpts_;
    /// <summary>
    /// Options for this step.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.ExecutorOpts ExecOpts {
      get { return execOpts_; }
      set {
        execOpts_ = value;
      }
    }

    /// <summary>Field number for the "send" field.</summary>
    public const int SendFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_send_codec
        = pb::FieldCodec.ForMessage(26, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> send_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// Runs the graph.
    ///
    /// Sends the tensors in "send" into the graph before the run and
    /// fetches the keys into `RunGraphResponse.recv` after the run.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Send {
      get { return send_; }
    }

    /// <summary>Field number for the "recv_key" field.</summary>
    public const int RecvKeyFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_recvKey_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> recvKey_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RecvKey {
      get { return recvKey_; }
    }

    /// <summary>Field number for the "is_partial" field.</summary>
    public const int IsPartialFieldNumber = 6;
    private bool isPartial_;
    /// <summary>
    /// True if the RunGraphRequest is a partial run request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPartial {
      get { return isPartial_; }
      set {
        isPartial_ = value;
      }
    }

    /// <summary>Field number for the "is_last_partial_run" field.</summary>
    public const int IsLastPartialRunFieldNumber = 7;
    private bool isLastPartialRun_;
    /// <summary>
    /// True if this is the last partial run request in a sequence of requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLastPartialRun {
      get { return isLastPartialRun_; }
      set {
        isLastPartialRun_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionHandle != other.SessionHandle) return false;
      if (GraphHandle != other.GraphHandle) return false;
      if (StepId != other.StepId) return false;
      if (!object.Equals(ExecOpts, other.ExecOpts)) return false;
      if(!send_.Equals(other.send_)) return false;
      if(!recvKey_.Equals(other.recvKey_)) return false;
      if (IsPartial != other.IsPartial) return false;
      if (IsLastPartialRun != other.IsLastPartialRun) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionHandle.Length != 0) hash ^= SessionHandle.GetHashCode();
      if (GraphHandle.Length != 0) hash ^= GraphHandle.GetHashCode();
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (execOpts_ != null) hash ^= ExecOpts.GetHashCode();
      hash ^= send_.GetHashCode();
      hash ^= recvKey_.GetHashCode();
      if (IsPartial != false) hash ^= IsPartial.GetHashCode();
      if (IsLastPartialRun != false) hash ^= IsLastPartialRun.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphHandle.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(GraphHandle);
      }
      if (StepId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StepId);
      }
      send_.WriteTo(output, _repeated_send_codec);
      recvKey_.WriteTo(output, _repeated_recvKey_codec);
      if (execOpts_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ExecOpts);
      }
      if (IsPartial != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsPartial);
      }
      if (IsLastPartialRun != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsLastPartialRun);
      }
      if (SessionHandle.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SessionHandle);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionHandle);
      }
      if (GraphHandle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GraphHandle);
      }
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (execOpts_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExecOpts);
      }
      size += send_.CalculateSize(_repeated_send_codec);
      size += recvKey_.CalculateSize(_repeated_recvKey_codec);
      if (IsPartial != false) {
        size += 1 + 1;
      }
      if (IsLastPartialRun != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.SessionHandle.Length != 0) {
        SessionHandle = other.SessionHandle;
      }
      if (other.GraphHandle.Length != 0) {
        GraphHandle = other.GraphHandle;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.execOpts_ != null) {
        if (execOpts_ == null) {
          execOpts_ = new global::Tensorflow.ExecutorOpts();
        }
        ExecOpts.MergeFrom(other.ExecOpts);
      }
      send_.Add(other.send_);
      recvKey_.Add(other.recvKey_);
      if (other.IsPartial != false) {
        IsPartial = other.IsPartial;
      }
      if (other.IsLastPartialRun != false) {
        IsLastPartialRun = other.IsLastPartialRun;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            GraphHandle = input.ReadString();
            break;
          }
          case 16: {
            StepId = input.ReadInt64();
            break;
          }
          case 26: {
            send_.AddEntriesFrom(input, _repeated_send_codec);
            break;
          }
          case 34: {
            recvKey_.AddEntriesFrom(input, _repeated_recvKey_codec);
            break;
          }
          case 42: {
            if (execOpts_ == null) {
              execOpts_ = new global::Tensorflow.ExecutorOpts();
            }
            input.ReadMessage(execOpts_);
            break;
          }
          case 48: {
            IsPartial = input.ReadBool();
            break;
          }
          case 56: {
            IsLastPartialRun = input.ReadBool();
            break;
          }
          case 66: {
            SessionHandle = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RunGraphResponse : pb::IMessage<RunGraphResponse> {
    private static readonly pb::MessageParser<RunGraphResponse> _parser = new pb::MessageParser<RunGraphResponse>(() => new RunGraphResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse(RunGraphResponse other) : this() {
      recv_ = other.recv_.Clone();
      StepStats = other.stepStats_ != null ? other.StepStats.Clone() : null;
      CostGraph = other.costGraph_ != null ? other.CostGraph.Clone() : null;
      partitionGraph_ = other.partitionGraph_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunGraphResponse Clone() {
      return new RunGraphResponse(this);
    }

    /// <summary>Field number for the "recv" field.</summary>
    public const int RecvFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.NamedTensorProto> _repeated_recv_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.NamedTensorProto.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.NamedTensorProto> recv_ = new pbc::RepeatedField<global::Tensorflow.NamedTensorProto>();
    /// <summary>
    /// A list of tensors corresponding to those requested by
    /// `RunGraphRequest.recv_key`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.NamedTensorProto> Recv {
      get { return recv_; }
    }

    /// <summary>Field number for the "step_stats" field.</summary>
    public const int StepStatsFieldNumber = 2;
    private global::Tensorflow.StepStats stepStats_;
    /// <summary>
    /// If the request asked for execution stats, the cost graph, or the partition
    /// graphs, these are returned here.
    /// TODO(suharshs): Package these in a RunMetadata instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.StepStats StepStats {
      get { return stepStats_; }
      set {
        stepStats_ = value;
      }
    }

    /// <summary>Field number for the "cost_graph" field.</summary>
    public const int CostGraphFieldNumber = 3;
    private global::Tensorflow.CostGraphDef costGraph_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.CostGraphDef CostGraph {
      get { return costGraph_; }
      set {
        costGraph_ = value;
      }
    }

    /// <summary>Field number for the "partition_graph" field.</summary>
    public const int PartitionGraphFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tensorflow.GraphDef> _repeated_partitionGraph_codec
        = pb::FieldCodec.ForMessage(34, global::Tensorflow.GraphDef.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.GraphDef> partitionGraph_ = new pbc::RepeatedField<global::Tensorflow.GraphDef>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.GraphDef> PartitionGraph {
      get { return partitionGraph_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!recv_.Equals(other.recv_)) return false;
      if (!object.Equals(StepStats, other.StepStats)) return false;
      if (!object.Equals(CostGraph, other.CostGraph)) return false;
      if(!partitionGraph_.Equals(other.partitionGraph_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= recv_.GetHashCode();
      if (stepStats_ != null) hash ^= StepStats.GetHashCode();
      if (costGraph_ != null) hash ^= CostGraph.GetHashCode();
      hash ^= partitionGraph_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      recv_.WriteTo(output, _repeated_recv_codec);
      if (stepStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StepStats);
      }
      if (costGraph_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CostGraph);
      }
      partitionGraph_.WriteTo(output, _repeated_partitionGraph_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += recv_.CalculateSize(_repeated_recv_codec);
      if (stepStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StepStats);
      }
      if (costGraph_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostGraph);
      }
      size += partitionGraph_.CalculateSize(_repeated_partitionGraph_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunGraphResponse other) {
      if (other == null) {
        return;
      }
      recv_.Add(other.recv_);
      if (other.stepStats_ != null) {
        if (stepStats_ == null) {
          stepStats_ = new global::Tensorflow.StepStats();
        }
        StepStats.MergeFrom(other.StepStats);
      }
      if (other.costGraph_ != null) {
        if (costGraph_ == null) {
          costGraph_ = new global::Tensorflow.CostGraphDef();
        }
        CostGraph.MergeFrom(other.CostGraph);
      }
      partitionGraph_.Add(other.partitionGraph_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            recv_.AddEntriesFrom(input, _repeated_recv_codec);
            break;
          }
          case 18: {
            if (stepStats_ == null) {
              stepStats_ = new global::Tensorflow.StepStats();
            }
            input.ReadMessage(stepStats_);
            break;
          }
          case 26: {
            if (costGraph_ == null) {
              costGraph_ = new global::Tensorflow.CostGraphDef();
            }
            input.ReadMessage(costGraph_);
            break;
          }
          case 34: {
            partitionGraph_.AddEntriesFrom(input, _repeated_partitionGraph_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupGraphRequest : pb::IMessage<CleanupGraphRequest> {
    private static readonly pb::MessageParser<CleanupGraphRequest> _parser = new pb::MessageParser<CleanupGraphRequest>(() => new CleanupGraphRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest(CleanupGraphRequest other) : this() {
      stepId_ = other.stepId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphRequest Clone() {
      return new CleanupGraphRequest(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CleanupGraphResponse : pb::IMessage<CleanupGraphResponse> {
    private static readonly pb::MessageParser<CleanupGraphResponse> _parser = new pb::MessageParser<CleanupGraphResponse>(() => new CleanupGraphResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CleanupGraphResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse(CleanupGraphResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CleanupGraphResponse Clone() {
      return new CleanupGraphResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CleanupGraphResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CleanupGraphResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CleanupGraphResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RecvTensorRequest : pb::IMessage<RecvTensorRequest> {
    private static readonly pb::MessageParser<RecvTensorRequest> _parser = new pb::MessageParser<RecvTensorRequest>(() => new RecvTensorRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvTensorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest(RecvTensorRequest other) : this() {
      stepId_ = other.stepId_;
      rendezvousKey_ = other.rendezvousKey_;
      dmaOk_ = other.dmaOk_;
      ClientLocality = other.clientLocality_ != null ? other.ClientLocality.Clone() : null;
      ServerLocality = other.serverLocality_ != null ? other.ServerLocality.Clone() : null;
      TransportOptions = other.transportOptions_ != null ? other.TransportOptions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorRequest Clone() {
      return new RecvTensorRequest(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    /// <summary>
    /// The step in which the tensor will be produced.
    ///
    /// REQUIRED: This must eventually correspond to the `step_id` passed
    /// into a RunGraph call on the same WorkerService.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "rendezvous_key" field.</summary>
    public const int RendezvousKeyFieldNumber = 2;
    private string rendezvousKey_ = "";
    /// <summary>
    /// A key that identifies the tensor to be received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RendezvousKey {
      get { return rendezvousKey_; }
      set {
        rendezvousKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dma_ok" field.</summary>
    public const int DmaOkFieldNumber = 3;
    private bool dmaOk_;
    /// <summary>
    /// If true, use an out-of-band DMA mechanism to transfer the
    /// received tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DmaOk {
      get { return dmaOk_; }
      set {
        dmaOk_ = value;
      }
    }

    /// <summary>Field number for the "client_locality" field.</summary>
    public const int ClientLocalityFieldNumber = 4;
    private global::Tensorflow.DeviceLocality clientLocality_;
    /// <summary>
    /// Optional information on client-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ClientLocality {
      get { return clientLocality_; }
      set {
        clientLocality_ = value;
      }
    }

    /// <summary>Field number for the "server_locality" field.</summary>
    public const int ServerLocalityFieldNumber = 5;
    private global::Tensorflow.DeviceLocality serverLocality_;
    /// <summary>
    /// Optional information on server-side device locality.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.DeviceLocality ServerLocality {
      get { return serverLocality_; }
      set {
        serverLocality_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional information needed by the RPC subsystem.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvTensorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvTensorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      if (RendezvousKey != other.RendezvousKey) return false;
      if (DmaOk != other.DmaOk) return false;
      if (!object.Equals(ClientLocality, other.ClientLocality)) return false;
      if (!object.Equals(ServerLocality, other.ServerLocality)) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (RendezvousKey.Length != 0) hash ^= RendezvousKey.GetHashCode();
      if (DmaOk != false) hash ^= DmaOk.GetHashCode();
      if (clientLocality_ != null) hash ^= ClientLocality.GetHashCode();
      if (serverLocality_ != null) hash ^= ServerLocality.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (RendezvousKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RendezvousKey);
      }
      if (DmaOk != false) {
        output.WriteRawTag(24);
        output.WriteBool(DmaOk);
      }
      if (clientLocality_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ClientLocality);
      }
      if (serverLocality_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ServerLocality);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TransportOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (RendezvousKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RendezvousKey);
      }
      if (DmaOk != false) {
        size += 1 + 1;
      }
      if (clientLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientLocality);
      }
      if (serverLocality_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ServerLocality);
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvTensorRequest other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.RendezvousKey.Length != 0) {
        RendezvousKey = other.RendezvousKey;
      }
      if (other.DmaOk != false) {
        DmaOk = other.DmaOk;
      }
      if (other.clientLocality_ != null) {
        if (clientLocality_ == null) {
          clientLocality_ = new global::Tensorflow.DeviceLocality();
        }
        ClientLocality.MergeFrom(other.ClientLocality);
      }
      if (other.serverLocality_ != null) {
        if (serverLocality_ == null) {
          serverLocality_ = new global::Tensorflow.DeviceLocality();
        }
        ServerLocality.MergeFrom(other.ServerLocality);
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          transportOptions_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
          case 18: {
            RendezvousKey = input.ReadString();
            break;
          }
          case 24: {
            DmaOk = input.ReadBool();
            break;
          }
          case 34: {
            if (clientLocality_ == null) {
              clientLocality_ = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(clientLocality_);
            break;
          }
          case 42: {
            if (serverLocality_ == null) {
              serverLocality_ = new global::Tensorflow.DeviceLocality();
            }
            input.ReadMessage(serverLocality_);
            break;
          }
          case 50: {
            if (transportOptions_ == null) {
              transportOptions_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(transportOptions_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RecvTensorResponse : pb::IMessage<RecvTensorResponse> {
    private static readonly pb::MessageParser<RecvTensorResponse> _parser = new pb::MessageParser<RecvTensorResponse>(() => new RecvTensorResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecvTensorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse(RecvTensorResponse other) : this() {
      Tensor = other.tensor_ != null ? other.Tensor.Clone() : null;
      isDead_ = other.isDead_;
      sendStartMicros_ = other.sendStartMicros_;
      TransportOptions = other.transportOptions_ != null ? other.TransportOptions.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecvTensorResponse Clone() {
      return new RecvTensorResponse(this);
    }

    /// <summary>Field number for the "tensor" field.</summary>
    public const int TensorFieldNumber = 1;
    private global::Tensorflow.TensorProto tensor_;
    /// <summary>
    /// The tensor as a proto.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TensorProto Tensor {
      get { return tensor_; }
      set {
        tensor_ = value;
      }
    }

    /// <summary>Field number for the "is_dead" field.</summary>
    public const int IsDeadFieldNumber = 2;
    private bool isDead_;
    /// <summary>
    /// If true, this tensor was the output of a dead node, and the
    /// content is invalid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDead {
      get { return isDead_; }
      set {
        isDead_ = value;
      }
    }

    /// <summary>Field number for the "send_start_micros" field.</summary>
    public const int SendStartMicrosFieldNumber = 3;
    private long sendStartMicros_;
    /// <summary>
    /// The time at which tensor was available and started to be returned.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendStartMicros {
      get { return sendStartMicros_; }
      set {
        sendStartMicros_ = value;
      }
    }

    /// <summary>Field number for the "transport_options" field.</summary>
    public const int TransportOptionsFieldNumber = 4;
    private global::Google.Protobuf.WellKnownTypes.Any transportOptions_;
    /// <summary>
    /// Optional additional information about how to receive the tensor,
    /// e.g. in the event that `RecvTensorRequest.dma_ok` was true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any TransportOptions {
      get { return transportOptions_; }
      set {
        transportOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecvTensorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecvTensorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Tensor, other.Tensor)) return false;
      if (IsDead != other.IsDead) return false;
      if (SendStartMicros != other.SendStartMicros) return false;
      if (!object.Equals(TransportOptions, other.TransportOptions)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tensor_ != null) hash ^= Tensor.GetHashCode();
      if (IsDead != false) hash ^= IsDead.GetHashCode();
      if (SendStartMicros != 0L) hash ^= SendStartMicros.GetHashCode();
      if (transportOptions_ != null) hash ^= TransportOptions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tensor_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Tensor);
      }
      if (IsDead != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsDead);
      }
      if (SendStartMicros != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SendStartMicros);
      }
      if (transportOptions_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TransportOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
      }
      if (IsDead != false) {
        size += 1 + 1;
      }
      if (SendStartMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendStartMicros);
      }
      if (transportOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransportOptions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecvTensorResponse other) {
      if (other == null) {
        return;
      }
      if (other.tensor_ != null) {
        if (tensor_ == null) {
          tensor_ = new global::Tensorflow.TensorProto();
        }
        Tensor.MergeFrom(other.Tensor);
      }
      if (other.IsDead != false) {
        IsDead = other.IsDead;
      }
      if (other.SendStartMicros != 0L) {
        SendStartMicros = other.SendStartMicros;
      }
      if (other.transportOptions_ != null) {
        if (transportOptions_ == null) {
          transportOptions_ = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        TransportOptions.MergeFrom(other.TransportOptions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (tensor_ == null) {
              tensor_ = new global::Tensorflow.TensorProto();
            }
            input.ReadMessage(tensor_);
            break;
          }
          case 16: {
            IsDead = input.ReadBool();
            break;
          }
          case 24: {
            SendStartMicros = input.ReadInt64();
            break;
          }
          case 34: {
            if (transportOptions_ == null) {
              transportOptions_ = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(transportOptions_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Out-of-band request to begin or end logging, or
  /// to retrieve logs for particular steps.
  /// </summary>
  public sealed partial class LoggingRequest : pb::IMessage<LoggingRequest> {
    private static readonly pb::MessageParser<LoggingRequest> _parser = new pb::MessageParser<LoggingRequest>(() => new LoggingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoggingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest(LoggingRequest other) : this() {
      rpcLogging_ = other.rpcLogging_;
      clear_ = other.clear_;
      fetchStepId_ = other.fetchStepId_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingRequest Clone() {
      return new LoggingRequest(this);
    }

    /// <summary>Field number for the "rpc_logging" field.</summary>
    public const int RpcLoggingFieldNumber = 1;
    private bool rpcLogging_;
    /// <summary>
    /// If true, RPC logging will be activated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RpcLogging {
      get { return rpcLogging_; }
      set {
        rpcLogging_ = value;
      }
    }

    /// <summary>Field number for the "clear" field.</summary>
    public const int ClearFieldNumber = 2;
    private bool clear_;
    /// <summary>
    /// If true, discard any saved logging data (for all steps).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Clear {
      get { return clear_; }
      set {
        clear_ = value;
      }
    }

    /// <summary>Field number for the "fetch_step_id" field.</summary>
    public const int FetchStepIdFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_fetchStepId_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> fetchStepId_ = new pbc::RepeatedField<long>();
    /// <summary>
    /// When set, requests all saved log data pertaining to the step.
    /// Any log data retrieved is eliminated from the store and cannot be
    /// retrieved again.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> FetchStepId {
      get { return fetchStepId_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoggingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoggingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RpcLogging != other.RpcLogging) return false;
      if (Clear != other.Clear) return false;
      if(!fetchStepId_.Equals(other.fetchStepId_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RpcLogging != false) hash ^= RpcLogging.GetHashCode();
      if (Clear != false) hash ^= Clear.GetHashCode();
      hash ^= fetchStepId_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcLogging != false) {
        output.WriteRawTag(8);
        output.WriteBool(RpcLogging);
      }
      if (Clear != false) {
        output.WriteRawTag(16);
        output.WriteBool(Clear);
      }
      fetchStepId_.WriteTo(output, _repeated_fetchStepId_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RpcLogging != false) {
        size += 1 + 1;
      }
      if (Clear != false) {
        size += 1 + 1;
      }
      size += fetchStepId_.CalculateSize(_repeated_fetchStepId_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoggingRequest other) {
      if (other == null) {
        return;
      }
      if (other.RpcLogging != false) {
        RpcLogging = other.RpcLogging;
      }
      if (other.Clear != false) {
        Clear = other.Clear;
      }
      fetchStepId_.Add(other.fetchStepId_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RpcLogging = input.ReadBool();
            break;
          }
          case 16: {
            Clear = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            fetchStepId_.AddEntriesFrom(input, _repeated_fetchStepId_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LabeledStepStats : pb::IMessage<LabeledStepStats> {
    private static readonly pb::MessageParser<LabeledStepStats> _parser = new pb::MessageParser<LabeledStepStats>(() => new LabeledStepStats());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabeledStepStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats(LabeledStepStats other) : this() {
      stepId_ = other.stepId_;
      StepStats = other.stepStats_ != null ? other.StepStats.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabeledStepStats Clone() {
      return new LabeledStepStats(this);
    }

    /// <summary>Field number for the "step_id" field.</summary>
    public const int StepIdFieldNumber = 1;
    private long stepId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StepId {
      get { return stepId_; }
      set {
        stepId_ = value;
      }
    }

    /// <summary>Field number for the "step_stats" field.</summary>
    public const int StepStatsFieldNumber = 2;
    private global::Tensorflow.StepStats stepStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.StepStats StepStats {
      get { return stepStats_; }
      set {
        stepStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabeledStepStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabeledStepStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StepId != other.StepId) return false;
      if (!object.Equals(StepStats, other.StepStats)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StepId != 0L) hash ^= StepId.GetHashCode();
      if (stepStats_ != null) hash ^= StepStats.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StepId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StepId);
      }
      if (stepStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(StepStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StepId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StepId);
      }
      if (stepStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StepStats);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabeledStepStats other) {
      if (other == null) {
        return;
      }
      if (other.StepId != 0L) {
        StepId = other.StepId;
      }
      if (other.stepStats_ != null) {
        if (stepStats_ == null) {
          stepStats_ = new global::Tensorflow.StepStats();
        }
        StepStats.MergeFrom(other.StepStats);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StepId = input.ReadInt64();
            break;
          }
          case 18: {
            if (stepStats_ == null) {
              stepStats_ = new global::Tensorflow.StepStats();
            }
            input.ReadMessage(stepStats_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoggingResponse : pb::IMessage<LoggingResponse> {
    private static readonly pb::MessageParser<LoggingResponse> _parser = new pb::MessageParser<LoggingResponse>(() => new LoggingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoggingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse(LoggingResponse other) : this() {
      step_ = other.step_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoggingResponse Clone() {
      return new LoggingResponse(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tensorflow.LabeledStepStats> _repeated_step_codec
        = pb::FieldCodec.ForMessage(10, global::Tensorflow.LabeledStepStats.Parser);
    private readonly pbc::RepeatedField<global::Tensorflow.LabeledStepStats> step_ = new pbc::RepeatedField<global::Tensorflow.LabeledStepStats>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tensorflow.LabeledStepStats> Step {
      get { return step_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoggingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoggingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!step_.Equals(other.step_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= step_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      step_.WriteTo(output, _repeated_step_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += step_.CalculateSize(_repeated_step_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoggingResponse other) {
      if (other == null) {
        return;
      }
      step_.Add(other.step_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            step_.AddEntriesFrom(input, _repeated_step_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceOpts : pb::IMessage<TraceOpts> {
    private static readonly pb::MessageParser<TraceOpts> _parser = new pb::MessageParser<TraceOpts>(() => new TraceOpts());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceOpts> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts(TraceOpts other) : this() {
      duration_ = other.duration_;
      useStepProfiler_ = other.useStepProfiler_;
      useKernelProfiler_ = other.useKernelProfiler_;
      useExtendedProfiler_ = other.useExtendedProfiler_;
      useGpuProfiler_ = other.useGpuProfiler_;
      useSampleProfiler_ = other.useSampleProfiler_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceOpts Clone() {
      return new TraceOpts(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private double duration_;
    /// <summary>
    /// Length of the trace to be taken, in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "use_step_profiler" field.</summary>
    public const int UseStepProfilerFieldNumber = 2;
    private bool useStepProfiler_;
    /// <summary>
    /// If true, capture step profile locally in each worker. Currently
    /// unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseStepProfiler {
      get { return useStepProfiler_; }
      set {
        useStepProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_kernel_profiler" field.</summary>
    public const int UseKernelProfilerFieldNumber = 3;
    private bool useKernelProfiler_;
    /// <summary>
    /// If true, capture kernel events from each worker.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseKernelProfiler {
      get { return useKernelProfiler_; }
      set {
        useKernelProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_extended_profiler" field.</summary>
    public const int UseExtendedProfilerFieldNumber = 4;
    private bool useExtendedProfiler_;
    /// <summary>
    /// If true, capture extended profiling events from TensorFlow process.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseExtendedProfiler {
      get { return useExtendedProfiler_; }
      set {
        useExtendedProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_gpu_profiler" field.</summary>
    public const int UseGpuProfilerFieldNumber = 5;
    private bool useGpuProfiler_;
    /// <summary>
    /// If true, capture GPU profiling events locally on each
    /// machine. Currently unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGpuProfiler {
      get { return useGpuProfiler_; }
      set {
        useGpuProfiler_ = value;
      }
    }

    /// <summary>Field number for the "use_sample_profiler" field.</summary>
    public const int UseSampleProfilerFieldNumber = 6;
    private bool useSampleProfiler_;
    /// <summary>
    /// If true, collect sampled profile events. Currently unimplemented.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseSampleProfiler {
      get { return useSampleProfiler_; }
      set {
        useSampleProfiler_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceOpts);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceOpts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Duration != other.Duration) return false;
      if (UseStepProfiler != other.UseStepProfiler) return false;
      if (UseKernelProfiler != other.UseKernelProfiler) return false;
      if (UseExtendedProfiler != other.UseExtendedProfiler) return false;
      if (UseGpuProfiler != other.UseGpuProfiler) return false;
      if (UseSampleProfiler != other.UseSampleProfiler) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0D) hash ^= Duration.GetHashCode();
      if (UseStepProfiler != false) hash ^= UseStepProfiler.GetHashCode();
      if (UseKernelProfiler != false) hash ^= UseKernelProfiler.GetHashCode();
      if (UseExtendedProfiler != false) hash ^= UseExtendedProfiler.GetHashCode();
      if (UseGpuProfiler != false) hash ^= UseGpuProfiler.GetHashCode();
      if (UseSampleProfiler != false) hash ^= UseSampleProfiler.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Duration);
      }
      if (UseStepProfiler != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseStepProfiler);
      }
      if (UseKernelProfiler != false) {
        output.WriteRawTag(24);
        output.WriteBool(UseKernelProfiler);
      }
      if (UseExtendedProfiler != false) {
        output.WriteRawTag(32);
        output.WriteBool(UseExtendedProfiler);
      }
      if (UseGpuProfiler != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseGpuProfiler);
      }
      if (UseSampleProfiler != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseSampleProfiler);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0D) {
        size += 1 + 8;
      }
      if (UseStepProfiler != false) {
        size += 1 + 1;
      }
      if (UseKernelProfiler != false) {
        size += 1 + 1;
      }
      if (UseExtendedProfiler != false) {
        size += 1 + 1;
      }
      if (UseGpuProfiler != false) {
        size += 1 + 1;
      }
      if (UseSampleProfiler != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceOpts other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0D) {
        Duration = other.Duration;
      }
      if (other.UseStepProfiler != false) {
        UseStepProfiler = other.UseStepProfiler;
      }
      if (other.UseKernelProfiler != false) {
        UseKernelProfiler = other.UseKernelProfiler;
      }
      if (other.UseExtendedProfiler != false) {
        UseExtendedProfiler = other.UseExtendedProfiler;
      }
      if (other.UseGpuProfiler != false) {
        UseGpuProfiler = other.UseGpuProfiler;
      }
      if (other.UseSampleProfiler != false) {
        UseSampleProfiler = other.UseSampleProfiler;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Duration = input.ReadDouble();
            break;
          }
          case 16: {
            UseStepProfiler = input.ReadBool();
            break;
          }
          case 24: {
            UseKernelProfiler = input.ReadBool();
            break;
          }
          case 32: {
            UseExtendedProfiler = input.ReadBool();
            break;
          }
          case 40: {
            UseGpuProfiler = input.ReadBool();
            break;
          }
          case 48: {
            UseSampleProfiler = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Out-of-band request to configure distributed tracing.
  /// </summary>
  public sealed partial class TracingRequest : pb::IMessage<TracingRequest> {
    private static readonly pb::MessageParser<TracingRequest> _parser = new pb::MessageParser<TracingRequest>(() => new TracingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest(TracingRequest other) : this() {
      Options = other.options_ != null ? other.Options.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingRequest Clone() {
      return new TracingRequest(this);
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 1;
    private global::Tensorflow.TraceOpts options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tensorflow.TraceOpts Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Options, other.Options)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (options_ != null) hash ^= Options.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (options_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Options);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracingRequest other) {
      if (other == null) {
        return;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          options_ = new global::Tensorflow.TraceOpts();
        }
        Options.MergeFrom(other.Options);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (options_ == null) {
              options_ = new global::Tensorflow.TraceOpts();
            }
            input.ReadMessage(options_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TracingResponse : pb::IMessage<TracingResponse> {
    private static readonly pb::MessageParser<TracingResponse> _parser = new pb::MessageParser<TracingResponse>(() => new TracingResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TracingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tensorflow.WorkerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse(TracingResponse other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TracingResponse Clone() {
      return new TracingResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TracingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TracingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TracingResponse other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
