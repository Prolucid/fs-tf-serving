// --------------------------------------------------------------------------------------
// FAKE build script
// --------------------------------------------------------------------------------------

#r @"packages/build/FAKE/tools/FakeLib.dll"

open Fake
open Fake.Git
open Fake.AssemblyInfoFile
open Fake.ReleaseNotesHelper
open System
open System.IO
#if MONO
#else
#load "packages/build/SourceLink.Fake/tools/Fake.fsx"
open SourceLink
#endif

// The name of the project
// (used by attributes in AssemblyInfo, name of a NuGet package and directory in 'src')
let project = "FsTfServing"

// Short summary of the project
// (used as description in AssemblyInfo and as a short summary for NuGet package)
let summary = "F# client for Tensorflow Serving API"

// Longer description of the project
// (used as a description for NuGet package; line breaks are automatically cleaned up)
let description = "F# client for Tensorflow Serving API"

// List of author names (for NuGet package)
let authors = [ "Eugene Tolmachev" ]

// Tags for your project (for NuGet package)
let tags = "tensorflow serving fsharp distributed"

// File system information 
let solutionFile  = "src/FsTfServing.sln"

// Pattern specifying assemblies to be tested using NUnit
let testAssemblies = "build/*Test*.dll"

// Git configuration (used for publishing documentation in gh-pages branch)
// The profile where the project is posted
let gitOwner = "Prolucid" 
let gitHome = "https://github.com/" + gitOwner

// The name of the project on GitHub
let gitName = "FsTfServing"

// The url for the raw files hosted
let gitRaw = environVarOrDefault "gitRaw" "https://raw.github.com/"+gitOwner+"/"+gitName

// build output folder
let build_out = "build" 

// Read additional information from the release notes document
let release = LoadReleaseNotes "RELEASE_NOTES.md"


let dotnetcliVersion = "2.0.0"

let mutable dotnetExePath = "dotnet"

let dotnet workingDir =
    DotNetCli.RunCommand (fun p -> { p with ToolPath = dotnetExePath
                                            WorkingDir = workingDir } )

Target "InstallDotNetCore" (fun _ ->
   dotnetExePath <- DotNetCli.InstallDotNetSDK dotnetcliVersion
)

Target "Clean" (fun _ ->
    dotnet "src/FsTfServing" "clean"
)

Target "Build" (fun _ ->
    dotnet "src/FsTfServing" "build -c Release"
)

Target "Meta" (fun _ ->
    [ "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">"
      "<PropertyGroup>"
      sprintf "<Description>%s</Description>" description
      "<PackageProjectUrl>https://github.com/Prolucid/fs-tf-serving</PackageProjectUrl>"
      "<PackageLicenseUrl>https://raw.githubusercontent.com/Prolucid/fs-tf-serving/master/LICENSE.md</PackageLicenseUrl>"
      "<PackageIconUrl>https://raw.githubusercontent.com/Prolucid/fs-tf-serving/master/docs/files/img/logo.png</PackageIconUrl>"
      "<RepositoryUrl>https://github.com/Prolucid/fs-tf-serving.git</RepositoryUrl>"
      "<PackageTags>tensorflow;serving;fsharp</PackageTags>"
      "<Authors>Eugene Tolmachev</Authors>" 
      sprintf "<Version>%s</Version>" (string release.SemVer)
      "</PropertyGroup>"
      "</Project>"]
    |> WriteToFile false "Meta.props"
)


// Helper active pattern for project types
let (|Fsproj|Csproj|) (projFileName:string) = 
    match projFileName with
    | f when f.EndsWith("fsproj") -> Fsproj
    | f when f.EndsWith("csproj") -> Csproj
    | _                           -> failwith (sprintf "Project file %s not supported. Unknown project type." projFileName)

// Copies binaries from default VS location to expected bin folder
// But keeps a subdirectory structure for each project in the 
// src folder to support multiple project outputs
Target "CopyBinaries" (fun _ ->
    CopyDir build_out "src/FsTfServing/bin/Release/netstandard2.0" (fun _ -> true)
)

Target "CleanDocs" (fun _ ->
    CleanDirs ["docs/output"]
)

// --------------------------------------------------------------------------------------
// Run the unit tests using test runner

Target "Tests" (fun _ ->
    dotnet "src/FsTfServingTests" "run"
)

#if MONO
#else
// --------------------------------------------------------------------------------------
// SourceLink allows Source Indexing on the PDB generated by the compiler, this allows
// the ability to step through the source code of external libraries https://github.com/ctaggart/SourceLink

Target "SourceLink" (fun _ ->
    let baseUrl = sprintf "%s/%s/{0}/%%var2%%" gitRaw project
    !! "src/**/*.??proj"
    |> Seq.iter (fun projFile ->
        let proj = VsProj.LoadRelease projFile 
        SourceLink.Index proj.CompilesNotLinked proj.OutputFilePdb __SOURCE_DIRECTORY__ baseUrl
    )
)

#endif

// --------------------------------------------------------------------------------------
// Build a NuGet package

Target "Package" (fun _ ->
    Paket.Pack(fun p -> 
        { p with
            OutputPath = build_out
            TemplateFile = "paket.template"
            Version = release.NugetVersion
            ReleaseNotes = toLines release.Notes})
)

Target "PublishNuget" (fun _ ->
    Paket.Push(fun p -> 
        { p with
            WorkingDir = build_out })
)


// --------------------------------------------------------------------------------------
// Generate the documentation

Target "GenerateReferenceDocs" (fun _ ->
    if not <| executeFSIWithArgs "docs/tools" "generate.fsx" ["--define:RELEASE"; "--define:REFERENCE"] [] then
      failwith "generating reference documentation failed"
)

let generateHelp' fail debug =
    let args =
        if debug then ["--define:HELP"]
        else ["--define:RELEASE"; "--define:HELP"]
    if executeFSIWithArgs "docs/tools" "generate.fsx" args [] then
        traceImportant "Help generated"
    else
        if fail then
            failwith "generating help documentation failed"
        else
            traceImportant "generating help documentation failed"

let generateHelp fail =
    generateHelp' fail false

Target "GenerateHelp" (fun _ ->
    DeleteFile "docs/content/release-notes.md"
    CopyFile "docs/content/" "RELEASE_NOTES.md"

    DeleteFile "docs/content/license.md"
    CopyFile "docs/content/" "LICENSE.md"

    generateHelp true
)

Target "GenerateHelpDebug" (fun _ ->
    DeleteFile "docs/content/release-notes.md"
    CopyFile "docs/content/" "RELEASE_NOTES.md"
    Rename "docs/content/release-notes.md" "docs/content/RELEASE_NOTES.md"

    DeleteFile "docs/content/license.md"
    CopyFile "docs/content/" "LICENSE.txt"
    Rename "docs/content/license.md" "docs/content/LICENSE.txt"

    generateHelp' true true
)

Target "KeepRunning" (fun _ ->    
    use watcher = new FileSystemWatcher(DirectoryInfo("docs/content").FullName,"*.*")
    watcher.EnableRaisingEvents <- true
    watcher.Changed.Add(fun e -> generateHelp false)
    watcher.Created.Add(fun e -> generateHelp false)
    watcher.Renamed.Add(fun e -> generateHelp false)
    watcher.Deleted.Add(fun e -> generateHelp false)

    traceImportant "Waiting for help edits. Press any key to stop."

    System.Console.ReadKey() |> ignore

    watcher.EnableRaisingEvents <- false
    watcher.Dispose()
)

Target "GenerateDocs" DoNothing

let createIndexFsx lang =
    let content = """(*** hide ***)
#I build_out

(**
FsTfServing ({0})
=========================
*)
"""
    let targetDir = "docs/content" @@ lang
    let targetFile = targetDir @@ "index.fsx"
    ensureDirectory targetDir
    System.IO.File.WriteAllText(targetFile, System.String.Format(content, lang))

Target "AddLangDocs" (fun _ ->
    let args = System.Environment.GetCommandLineArgs()
    if args.Length < 4 then
        failwith "Language not specified."

    args.[3..]
    |> Seq.iter (fun lang ->
        if lang.Length <> 2 && lang.Length <> 3 then
            failwithf "Language must be 2 or 3 characters (ex. 'de', 'fr', 'ja', 'gsw', etc.): %s" lang

        let templateFileName = "template.cshtml"
        let templateDir = "docs/tools/templates"
        let langTemplateDir = templateDir @@ lang
        let langTemplateFileName = langTemplateDir @@ templateFileName

        if System.IO.File.Exists(langTemplateFileName) then
            failwithf "Documents for specified language '%s' have already been added." lang

        ensureDirectory langTemplateDir
        Copy langTemplateDir [ templateDir @@ templateFileName ]

        createIndexFsx lang)
)

// --------------------------------------------------------------------------------------
// Release Scripts

Target "ReleaseDocs" (fun _ ->
    let tempDocsDir = "temp/gh-pages"
    CleanDir tempDocsDir
    Repository.cloneSingleBranch "" (gitHome + "/" + gitName + ".git") "gh-pages" tempDocsDir

    CopyRecursive "docs/output" tempDocsDir true |> tracefn "%A"
    StageAll tempDocsDir
    Git.Commit.Commit tempDocsDir (sprintf "Update generated documentation for version %s" release.NugetVersion)
    Branches.push tempDocsDir
)

#load "paket-files/build/fsharp/FAKE/modules/Octokit/Octokit.fsx"
open Octokit

Target "Release" (fun _ ->
    StageAll ""
    Git.Commit.Commit "" (sprintf "Bump version to %s" release.NugetVersion)
    Branches.push ""

    Branches.tag "" release.NugetVersion
    Branches.pushTag "" "origin" release.NugetVersion
    
    // release on github
    createClient (getBuildParamOrDefault "github-user" "") (getBuildParamOrDefault "github-pw" "")
    |> createDraft gitOwner gitName release.NugetVersion (release.SemVer.PreRelease <> None) release.Notes 
    // TODO: |> uploadFile "PATH_TO_FILE"    
    |> releaseDraft
    |> Async.RunSynchronously
)


// --------------------------------------------------------------------------------------
// code-gen tasks
module Grpc =
    let cli,plugin = 
        let path = "packages" @@ "build" @@ "Grpc.Tools" @@ "tools"
        if isWindows then ("windows_x64","protoc.exe","grpc_csharp_plugin.exe")
        else if isLinux then ("linux_x64","protoc","grpc_csharp_plugin")
        else ("macosx_x64","protoc","grpc_csharp_plugin")
        |> fun (p,c,pl) -> (path @@ p @@ c, path @@ p @@ pl)
    let chmod () =
        if isWindows then ()
        else 
            Shell.Exec("chmod"," +x "+cli) |> ignore
            Shell.Exec("chmod"," +x "+plugin) |> ignore

Target "Grpc" (fun _ ->
    let generated = "ext" @@ "Grpc" @@ "generated" 
    CleanDir generated
    !!"paket-files/tensorflow/serving/**/*.proto"
    ++ "paket-files/tensorflow/tensorflow/**/*.proto"
    |> Seq.iter (fun path -> Shell.Exec(Grpc.cli,
                                    "--csharp_out=" + generated 
                                    + (if Path.GetFileName path = "prediction_service.proto" 
                                       then " --grpc_out=" + generated + " --plugin=protoc-gen-grpc=" + Grpc.plugin
                                       else "")
                                    + " --proto_path=" + "packages" @@ "build" @@ "Google.Protobuf.Tools" @@ "tools"
                                    + " --proto_path=" + (Path.GetDirectoryName path)
                                    + " --proto_path=" + "paket-files" @@ "tensorflow" @@ "serving"
                                    + " --proto_path=" + "paket-files" @@ "tensorflow" @@ "tensorflow"
                                    + " " + path) |> ignore)
)

Target "GenerateSources" DoNothing

"Grpc"
  ==> "GenerateSources"

Target "Restore" (fun _ ->
    Paket.Restore id
    Grpc.chmod()
)

// --------------------------------------------------------------------------------------
// Run all targets by default. Invoke 'build <Target>' to override

Target "All" DoNothing

"Clean"
  ==> "Restore"
  ==> "Build"
  ==> "CopyBinaries"
  ==> "Tests"
  ==> "All"

"All" 
#if MONO
#else
  =?> ("SourceLink", Pdbstr.tryFind().IsSome )
#endif
  ==> "Package"
  =?> ("GenerateReferenceDocs",isLocalBuild)
  =?> ("GenerateDocs",isLocalBuild)
  =?> ("ReleaseDocs",isLocalBuild)

"CleanDocs"
  ==> "GenerateHelp"
  ==> "GenerateReferenceDocs"
  ==> "GenerateDocs"

"CleanDocs"
  ==> "GenerateHelpDebug"

"GenerateHelp"
  ==> "KeepRunning"
    
"ReleaseDocs"
  ==> "Release"

"Package"
  ==> "PublishNuget"
  ==> "Release"

RunTargetOrDefault "All"
